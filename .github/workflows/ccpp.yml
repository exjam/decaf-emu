name: C/C++ CI

on: [push]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name: [
          ubuntu-18.04-gcc-8,
          ubuntu-18.04-clang-6.0,
        ]
        include: 
          - name: ubuntu-18.04-gcc-8
            os: ubuntu-18.04
            compiler: gcc
            version: "8"
          - name: ubuntu-18.04-clang-6.0
            os: ubuntu-18.04
            compiler: clang
            version: "6.0"
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: initialise
      run: mkdir build
    - name: apt
      run: |
        wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-bionic.list http://packages.lunarg.com/vulkan/lunarg-vulkan-bionic.list
        sudo apt-add-repository ppa:cginternals/ppa
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build libcurl4-openssl-dev libsdl2-dev libssl-dev zlib1g-dev libavcodec-dev libavfilter-dev libavutil-dev libswscale-dev vulkan-sdk
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y g++-${{ matrix.version }}
          echo ::set-env name=CC::gcc-${{ matrix.version }}
          echo ::set-env name=CXX::g++-${{ matrix.version }}
          echo ::set-env name=CONAN_COMPILER::gcc
          echo ::set-env name=CONAN_COMPILER_VERSION::${{ matrix.version }}
        else
          sudo apt-get install -y clang-${{ matrix.version }}
          echo ::set-env name=CC::clang-${{ matrix.version }}
          echo ::set-env name=CXX::clang++-${{ matrix.version }}
          echo ::set-env name=CONAN_COMPILER::gcc
          echo ::set-env name=CONAN_COMPILER_VERSION::${{ matrix.version }}
        fi
    - name: conan
      run: |
        cd build
        pip install --user conan
        source ~/.profile
        conan user
        conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan || true
        conan install .. --build=missing -o silent=True -o ffmpeg=True -o curl=False -o openssl=False -o sdl2=False -o zlib=False
    - name: configure
      run: |
        cd build
        cmake -DDECAF_BUILD_TOOLS=ON -DDECAF_FFMPEG=ON -DDECAF_VULKAN=ON -DDECAF_GL=ON -DCMAKE_BUILD_TYPE=Release ..
    - name: build
      run: |
        cd build
        make -j2
