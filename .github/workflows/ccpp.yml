name: C/C++ CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [
          macOS-10.14-Xcode-11,
          ubuntu-18.04-gcc-8,
#          ubuntu-18.04-clang-7,
          windows-2019-cl,
        ]
        include:
          - name: macOS-10.14-Xcode-11
            os: macOS-10.14
            compiler: xcode
            version: "11"
          - name: ubuntu-18.04-gcc-8
            os: ubuntu-18.04
            compiler: gcc
            version: "8"
# Clang maybe using wrong std c++?
#          - name: ubuntu-18.04-clang-7
#            os: ubuntu-18.04
#            compiler: clang
#            version: "7"
          - name: windows-2019-cl
            os: windows-2019
            compiler: cl
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true

    - name: Initialise
      run: mkdir build

    - name: Install CMake 3.16.0 (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        wget https://github.com/Kitware/CMake/releases/download/v3.16.0/cmake-3.16.0-Linux-x86_64.sh
        chmod +x cmake-3.16.0-Linux-x86_64.sh
        sudo mkdir /opt/cmake
        sudo ./cmake-3.16.0-Linux-x86_64.sh --skip-license --prefix=/opt/cmake /usr/local/bin/ccmake
        sudo rm -f /usr/local/bin/cmake /usr/local/bin/ctest
        sudo ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
        sudo ln -s /opt/cmake/bin/ctest /usr/local/bin/ctest
        cmake --version

    - name: Install CMake 3.16.0 (macOS)
      if: startsWith(matrix.os, 'macOS')
      run: |
        wget https://github.com/Kitware/CMake/releases/download/v3.16.0/cmake-3.16.0-Darwin-x86_64.tar.gz
        tar -xzf cmake-3.16.0-Darwin-x86_64.tar.gz
        sudo mv cmake-3.16.0-Darwin-x86_64/CMake.app /Applications
        sudo rm -f /usr/local/bin/cmake /usr/local/bin/ctest
        sudo ln -s /Applications/CMake.app/Contents/bin/cmake /usr/local/bin/cmake
        sudo ln -s /Applications/CMake.app/Contents/bin/ctest /usr/local/bin/ctest
        cmake --version

    - name: Install CMake 3.16.0 (Windows)
      if: startsWith(matrix.os, 'Windows')
      run: |
        Invoke-WebRequest "https://github.com/Kitware/CMake/releases/download/v3.16.0/cmake-3.16.0-win64-x64.msi" -OutFile "cmake-3.16.0-win64-x64.msi"
        Start-Process -Filepath "cmake-3.16.0-win64-x64.msi" -ArgumentList "/S"
        cmake --version

    - name: Install Dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        cd build
        wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-bionic.list http://packages.lunarg.com/vulkan/lunarg-vulkan-bionic.list
        sudo apt-add-repository ppa:cginternals/ppa
        sudo apt-get update
        sudo apt-get install -y cmake libcurl4-openssl-dev libsdl2-dev libssl-dev zlib1g-dev libavcodec-dev libavfilter-dev libavutil-dev libswscale-dev vulkan-sdk python3-setuptools
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y g++-${{ matrix.version }}
        else
          sudo apt-get install -y clang-${{ matrix.version }}
        fi
        pip3 install wheel
        pip3 install aqtinstall
        python3 -m aqt install 5.13.0 linux desktop

    - name: Install Dependencies (macOS)
      if: startsWith(matrix.os, 'macOS')
      run: |
        brew install openssl sdl2
        mkdir vulkan
        cd vulkan
        wget -q -O vulkansdk.tar.gz https://sdk.lunarg.com/sdk/download/1.1.126.0/mac/vulkansdk-macos-1.1.126.0.tar.gz?u=
        tar -xzf vulkansdk.tar.gz

    - name: Load Cached Vulkan SDK (Windows)
      id: cache-vulkan-windows
      if: startsWith(matrix.os, 'windows')
      uses: actions/cache@v1
      with:
        path: C:/VulkanSDK/1.1.126.0
        key: ${{ runner.os }}-vulkan-1.1.126.0

    - name: Install Vulkan SDK from web (Windows)
      if: startsWith(matrix.os, 'windows') && steps.cache-vulkan-windows.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        mkdir "C:\\VulkanSDK"
        cd "C:\\VulkanSDK"
        Invoke-WebRequest "https://sdk.lunarg.com/sdk/download/1.1.126.0/windows/VulkanSDK-1.1.126.0-Installer.exe?u=" -OutFile "VulkanSDK.exe"
        Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");
        cd "C:\\VulkanSDK\\1.1.126.0"
        Remove-Item -Force -Recurse Bin32
        Remove-Item -Force -Recurse Demos
        Remove-Item -Force -Recurse Lib32
        Remove-Item -Force -Recurse RunTimeInstaller
        Remove-Item -Force -Recurse Samples
        Remove-Item -Force -Recurse shaderc
        Remove-Item -Force -Recurse Templates
        Remove-Item -Force -Recurse Tools
        Remove-Item -Force -Recurse Tools32
        Remove-Item -Force -Recurse Third-Party
        Remove-Item -Force Uninstall.exe
        Remove-Item -Force Bin\\VkLayer*
        Remove-Item -Force Lib\\shaderc*
        dir

    - name: Load Cached Qt (Windows)
      id: cache-qt-windows
      if: startsWith(matrix.os, 'windows')
      uses: actions/cache@v1
      with:
        path: C:/Qt/5.13.0/msvc2017_64
        key: ${{ runner.os }}-qt-5.13.0-msvc2017_64

    - name: Install Qt from web (Windows)
      if: startsWith(matrix.os, 'windows') && steps.cache-qt-windows.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        mkdir "C:\\Qt"
        cd "C:\\Qt"
        pip install aqtinstall
        python -m aqt install 5.13.0 windows desktop win64_msvc2017_64
        dir

    - name: Setup Environment (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo ::set-env name=CC::gcc-${{ matrix.version }}
          echo ::set-env name=CXX::g++-${{ matrix.version }}
          echo "::set-env name=CONAN_ENV_COMPILER_LIBCXX::libstdc++11"
        else
          echo ::set-env name=CC::clang-${{ matrix.version }}
          echo ::set-env name=CXX::clang++-${{ matrix.version }}
        fi
        echo "::set-env name=CONAN_ENV_COMPILER::${{ matrix.compiler }}"
        echo "::set-env name=CONAN_ENV_COMPILER_VERSION::${{ matrix.version }}"
        echo "::set-env name=QTDIR::$PWD/build/5.13.0/gcc_64"

    - name: Setup Environment (macOS)
      if: startsWith(matrix.os, 'macOS')
      run: |
        echo "::set-env name=VULKAN_SDK::$PWD/vulkan/vulkansdk-macos-1.1.126.0/macOS"
        sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app

    - name: Setup Environment (Windows)
      if: startsWith(matrix.os, 'windows')
      shell: powershell
      run: |
        echo "::set-env name=VULKAN_SDK::C:\\VulkanSDK\\1.1.126.0"
        echo "::set-env name=QTDIR::C:\\Qt\\5.13.0\\msvc2017_64"
        echo "::set-env name=CONAN_ENV_COMPILER::Visual Studio"
        echo "::set-env name=CONAN_ENV_COMPILER_VERSION::15"

    - name: Install Conan Dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        cd build
        pip install --user conan
        source ~/.profile
        conan user
        conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan || true
        conan install .. -s compiler=${{ matrix.compiler }} -s compiler.version=${{ matrix.version }} -s compiler.libcxx=libstdc++11 --build=missing -o silent=True -o ffmpeg=True -o curl=False -o openssl=False -o sdl2=False -o zlib=False

    - name: Install Conan Dependencies (macOS)
      if: startsWith(matrix.os, 'macOS')
      run: |
        echo "Happy days, nothing to get via conan on Mac OS X right now!"
        echo "So we cheat and dont even bother calling it. XD"

    - name: Install Conan Dependencies (Windows)
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        cd build
        pip install conan
        conan user
        conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
        conan install .. -s compiler="Visual Studio" -s compiler.version=15 --build=missing -o silent=True -o ffmpeg=True -o curl=True -o openssl=True -o sdl2=True -o zlib=True

    - name: Configure (macOS)
      if: startsWith(matrix.os, 'macOS')
      run: |
        cd build
        cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DDECAF_BUILD_TOOLS=ON -DDECAF_FFMPEG=OFF -DDECAF_VULKAN=ON -DDECAF_QT=OFF -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DSDL2_DIR=/usr/local/opt/sdl2 -DCMAKE_INSTALL_PREFIX=install ..

    - name: Configure (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        cd build
        cmake -DDECAF_BUILD_TOOLS=ON -DDECAF_FFMPEG=ON -DDECAF_VULKAN=ON -DDECAF_QT=ON -DCMAKE_BUILD_TYPE=Release -DQt5_DIR=$QTDIR/lib/cmake/Qt5 -DCMAKE_INSTALL_PREFIX=install ..

    - name: Configure (Windows)
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        cd build
        cmake -DDECAF_BUILD_TOOLS=ON -DDECAF_FFMPEG=ON -DDECAF_VULKAN=ON -DDECAF_QT=ON -DCMAKE_BUILD_TYPE=Release -DQt5_DIR=%QTDIR%/lib/cmake/Qt5 -DCMAKE_INSTALL_PREFIX=install ..

    - name: Build
      run: |
        cd build
        cmake --build . --config Release -j 2 --target install

    - name: Package (Windows)
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        cd build/install
        %QTDIR%/bin/windeployqt.exe --release --no-translations --no-angle --no-opengl-sw decaf-qt.exe

    - uses: actions/upload-artifact@master
      if: startsWith(matrix.os, 'windows')
      with:
        name: decaf-emu-windows
        path: build/install
